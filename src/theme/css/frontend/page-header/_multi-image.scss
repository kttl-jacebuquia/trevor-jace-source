// Image settings for Multi-Image variant
// per item, per breakpoint
// ( width, height, top, left_or_right (left or right for mobile, left for the rest)
$multi-image-images-config: (
  // Image 1
  1: (
    rotate: -9.4,
    z-index: 1,
    sm: ( 162, 162, 74, -27 ), // left for mobile
    md: ( 183, 183, 477, -45 ),
    lg: ( 253, 253, 527, -50 ),
    lg2: ( 315, 315, 668, -82 ),
    xl: ( 377, 375, 838, -60 ),
  ),
  // Image 2
  2: (
    rotate: 7.15,
    z-index: 2,
    sm: ( 182, 215, 206, 37 ), // left for mobile
    md: ( 174, 205, 448, 262 ),
    lg: ( 243, 283, 488, 375 ),
    lg2: ( 299, 352, 619, 447 ),
    xl: ( 357, 421, 784, 536 ),
  ),
  // Image 3
  3: (
    rotate: -4.53,
    z-index: 3,
    sm: ( 165, 220, 374, -7 ), // left for mobile
    md: ( 208, 277, 590, 110 ),
    lg: ( 287, 382, 684, 165 ),
    lg2: ( 358, 476, 863, 184 ),
    xl: ( 428, 568, 1065, 257 ),
  ),
  // Image 4
  4: (
    rotate: -4.3,
    z-index: 1,
    sm: ( 219, 238, 97, -43 ), // right for mobile
    md: ( 201, 218, 147, 441 ),
    lg: ( 262, 285, 141, 600 ),
    lg2: ( 327, 356, 186, 726 ),
    xl: ( 390, 425, 296, 900 ),
  ),
  // Image 5
  5: (
    rotate: 0,
    z-index: 2,
    sm: ( 168, 206, 327, -30 ), // right for mobile
    md: ( 264, 323, 249, 529 ),
    lg: ( 344, 422, 274, 713 ),
    lg2: ( 428, 526, 352, 870 ),
    xl: ( 513, 627, 497, 1056 ),
  ),
  // Image 6
  6: (
    rotate: 7.93,
    z-index: 3,
    sm: ( 171, 197, 545, 30 ), // right for mobile
    md: ( 201, 232, 659, 436 ),
    lg: ( 278, 320, 779, 615 ),
    lg2: ( 346, 399, 982, 746 ),
    xl: ( 414, 477, 1217, 920 ),
  ),
);

// There is a need for separate variable to store breakpoint widths
// Since tailwind's theme() function is only evaluated after SASS,
// So we don't have access to theme() values.
$screen-widths: (
  sm: rem-calc(375),
  md: rem-calc(768),
  lg: rem-calc(1024),
  lg2: rem-calc(1280),
  xl: rem-calc(1440),
);

.header-container {
  &--multi-image {
    @apply pt-0 overflow-hidden;
    padding-bottom: #{rem-calc(500)};
    margin-bottom: #{rem-calc(-500)};

    @screen md {
      @apply pt-0;
      margin-top: -$top-nav-height-tablet;
    }

    @screen lg {
      margin-top: -$top-nav-height-desktop;
    }

    @screen xl {
      @apply pt-0;
    }

    + main > :first-child {
      @apply pt-px590;

      @screen md {
        @apply pt-px247;
      }

      @screen lg2 {
        @apply pt-px279;
      }
    }
  }

  &__wrap {
    @apply relative pb-px293;

    @screen mobile {
      max-width: none;
      width: 100vw;
    }

    @screen md {
      @apply pb-px382;
      padding-top: $top-nav-height-tablet;
    }

    @screen lg {
      padding-top: $top-nav-height-desktop;
      padding-bottom: 588px;
    }

    @screen lg2 {
      padding-bottom: rem-calc(729);
    }

    @screen xl {
      @apply pb-px907;
    }
  }
}

.page-header {
  &.type-multi-image {
    @apply pt-px50 relative mt-px136;

    @screen md {
      @apply pt-px22 mt-0;
    }

    @screen lg2 {
      @apply pt-px95;
    }

    .page-header {
      &-content-wrap {
        @apply tw-grid w-full p-0;
        z-index: 10;

        @screen md {
          @apply p-0;
        }
      }

      &-inner {
        @apply pb-0 md:pb-0 xl:pb-0;
      }

      &-title {
        @apply text-px32 leading-px40 font-semibold col-span-full;

        @screen md {
          @apply text-px32 leading-px42 col-span-5;
        }

        @screen lg {
          @apply text-px40 leading-px48 col-span-7;
        }

        @screen lg2 {
          @apply text-px52 leading-px62 col-span-8;
        }

        @screen xl {
          @apply text-px70 leading-px80 col-span-9;
        }

        tilt {
          @apply block font-bold text-px44 leading-px54 tracking-em005 mt-0 rotate-0;

          @screen lg {
            @apply text-px50 leading-px60;
          }

          @screen lg2 {
            @apply text-px78 leading-px98;
          }

          @screen xl {
            @apply text-px98 leading-px108;
          }
        }
      }

      &-desc {
        @apply mt-px10 p-0 col-span-full;
        @apply text-px18 leading-px26 tracking-em005;

        @screen md {
          @apply mt-px10 col-span-4 text-px18 leading-px24;
        }

        @screen lg {
          @apply col-span-7 text-px20;
        }

        @screen lg2 {
          @apply mt-px15 text-px22 leading-px32;
        }

        @screen xl {
          @apply text-px24 col-span-6 leading-px34;
        }
      }

      &-img-wrap {
        @apply relative h-0 -ml-px28 overflow-visible;
        width: calc(100% + #{rem-calc(56)});

        @screen md {
          @apply absolute left-0 -top-px140 ml-0 w-full;
        }

        @screen lg2 {
          @apply w-full -top-px320 ml-0;
        }

        @screen xl {
          @apply -top-px270;
        }
      }

      &-images {
        @apply absolute top-0 left-0 right-0 w-full pointer-events-none overflow-visible;
        height: 200vh;
        min-height: 2160px; // 1080p x 2
      }

      &-image {
        @apply block absolute rounded-px10 transform rotate-0;
        @apply w-full h-full object-cover overflow-hidden;

        &::after {
          @apply block;
          content: '';
        }

        @each $index, $image-config in $multi-image-images-config {
          &:nth-child(#{$index}) {
            @each $screen, $config in $image-config {
              $screen-width: map-get($screen-widths, $screen);
              @if ( $screen == rotate ) {
                --tw-rotate: #{$config + "deg"};
              }
              @else if ( $screen == z-index ) {
                z-index: #{$config};
              }
              @else {
                $width: nth($config, 1);
                $height: nth($config, 2);
                $top: nth($config, 3);
                $left_or_right: nth($config, 4);

                // Calculations
                $unitless-screen-rem: strip-unit($screen-width);
                $unitless-width-rem: strip-unit(rem-calc($width));
                $unitless-height-rem: strip-unit(rem-calc($height));
                $width-ratio: $unitless-width-rem / $unitless-screen-rem;
                $height-ratio: $unitless-height-rem / $unitless-width-rem;

                $final-width: percentage($width-ratio);
                $final-top: rem-calc($top);

                @if $screen == sm {
                  // Calculate left and right depending on the item index
                  $final-left: if( $index < 4, #{rem-calc($left_or_right)}, auto );
                  $final-right: if( $index < 4, auto, #{rem-calc($left_or_right)} );

                  width: #{rem-calc($width)};
                  height: auto;
                  top: $final-top;
                  left: auto;
                  left: $final-left;
                  right: $final-right;
                }
                @else {
                  // Calculations
                  $unitless-left-rem: strip-unit(rem-calc($left_or_right));
                  $left-ratio: $unitless-left-rem / $unitless-screen-rem;
                  $final-left: percentage($left-ratio);

                  @if $screen == 'lg2' {
                    $final-top: calc(#{$final-top} + #{$top-nav-height-desktop});
                  }

                  @screen #{$screen} {
                    width: $final-width;
                    height: auto;
                    top: $final-top;
                    left: $final-left;
                    right: auto;
                  }
                }

                &::after {
                  content: '';
                  width: 100%;
                  padding-top: percentage($height-ratio);
                }
              }
            }
          }
        }

        img {
          @apply absolute top-0 left-0 w-full h-full object-cover;
        }
      }
    }
  }
}
