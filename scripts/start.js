'use strict';

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', (err) => {
	throw err;
});

// Ensure environment variables are read.
require('../config/env');

const fs = require('fs');
const chalk = require('react-dev-utils/chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const resolveConfig = require('tailwindcss/resolveConfig');
const clearConsole = require('react-dev-utils/clearConsole');
const {
	choosePort,
	createCompiler,
	prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const paths = require('../config/paths');
const configFactory = require('../config/webpack.config');
const createDevServerConfig = require('../config/webpackDevServer.config');

const isInteractive = process.stdout.isTTY;

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || '0.0.0.0';

choosePort(HOST, DEFAULT_PORT).then((port) => {
	if (port === null) {
		// We have not found a port.
		return;
	}

	const config = configFactory('development');
	const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
	const appName = require(paths.appPackageJson).name;
	const urls = prepareUrls(protocol, HOST, port, '/');

	const devSocket = {
		warnings: (warnings) =>
			devServer.sockWrite(devServer.sockets, 'warnings', warnings),
		errors: (errors) =>
			devServer.sockWrite(devServer.sockets, 'errors', errors),
	};
	// Create a webpack compiler that is configured with custom messages.
	const compiler = createCompiler({
		appName,
		config,
		devSocket,
		urls,
		webpack,
	});
	// Serve webpack assets generated by the compiler over a web server.
	const serverConfig = createDevServerConfig('trevor-node.lndo.site');
	const devServer = new WebpackDevServer(compiler, serverConfig);
	// Launch WebpackDevServer.
	devServer.listen(port, HOST, (err) => {
		if (err) {
			return console.log(err);
		}
		if (isInteractive) {
			clearConsole();
		}

		// We used to support resolving modules according to `NODE_PATH`.
		// This now has been deprecated in favor of jsconfig/tsconfig.json
		// This lets you use absolute paths in imports inside large monorepos:
		if (process.env.NODE_PATH) {
			console.log(
				chalk.yellow(
					'Setting NODE_PATH to resolve modules absolutely has been deprecated in favor of setting baseUrl in jsconfig.json (or tsconfig.json if you are using TypeScript) and will be removed in a future major release of create-react-app.'
				)
			);
			console.log();
		}

		console.log(chalk.cyan('Starting the development server...\n'));
		openBrowser(urls.localUrlForBrowser);

		// Write Tailwind's config to a JSON file
		fs.writeFileSync(
			paths.tailwindConfJSONOut,
			JSON.stringify(resolveConfig(require(paths.tailwindCssConf)))
		);
	});

	['SIGINT', 'SIGTERM'].forEach(function (sig) {
		process.on(sig, function () {
			devServer.close();
			process.exit();
		});
	});

	if (isInteractive || process.env.CI !== 'true') {
		// Gracefully exit when stdin ends
		process.stdin.on('end', function () {
			devServer.close();
			process.exit();
		});
		process.stdin.resume();
	}
});
